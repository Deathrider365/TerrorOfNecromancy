#option SHORT_CIRCUIT on
#option HEADER_GUARD on
#include "std.zh"
#include "VenrobMisc.zh"

namespace Venrob::BitmapRental //start
{
	DEFINE MAX_RENTAL_BITMAPS = 32;
	untyped Data[MAX_RENTAL_BITMAPS*2];
	
	/*
	 * Reserves a reusable, pre-allocated bitmap and returns it.
	 * When done with it, be sure to free it with 'free_bitmap()' so that it
	 *     can be recycled.
	 * Bitmaps returned are guaranteed to be at least Allocated. They may or may not already contain data.
	 *     -Using 'bitmap->Create()' to create your own bitmap on that pointer will rectify this.
	 *     -Note that this is NOT the same as 'Game->CreateBitmap()'!
	 */
	bitmap rent_bitmap()
	{
		for(int q = 0; q < MAX_RENTAL_BITMAPS*2; q+=2)
		{
			unless(Data[q])
			{
				Data[q] = true;
				unless((<bitmap>Data[q+1])->isAllocated()) Data[q+1] = Game->AllocateBitmap();
				return Data[q+1];
			}
		}
		return NULL;
	}
	
	/*
	 * Frees a rented bitmap to be recycled.
	 */
	void free_bitmap(bitmap bit)
	{
		bool found = false;
		for(int q = 0; q < MAX_RENTAL_BITMAPS*2; q+=2)
		{
			unless((<bitmap>Data[q+1])->isAllocated()) Data[q+1] = Game->AllocateBitmap();
			if(Data[q])
			{
				if(Data[q+1] == bit)
				{
					Data[q] = false;
					if(found) //Safeguard in case of accidental duplicate entries. This probably shouldn't happen anyway?
						Data[q+1] = Game->AllocateBitmap();
					else
						found = true;
				}
			}
		}
	}
	
	/*
	 * Ensures that a fresh stock of allocated bitmaps is available.
	 * This will automatically free any bitmaps which fail an '->isAllocated()' check.
	 * This should be called in an 'onLaunch' or 'onSaveLoad' slot script.
	 */
	void refresh_bitmaps()
	{
		for(int q = 0; q < MAX_RENTAL_BITMAPS*2; q+=2)
		{
			unless((<bitmap>Data[q+1])->isAllocated())
			{
				Data[q+1] = Game->AllocateBitmap();
				Data[q] = false;
			}
		}
	}
} //end

namespace Venrob
{
	void generate(bitmap b)
	{
		generate(b, 256, 224, 0); //Default to screen size (including subscreen)
	}
	void generate(bitmap b, int w, int h)
	{
		generate(b, w, h, 0);
	}
	void generate(bitmap b, int w, int h, int layer)
	{
		if(Game->FFRules[qr_OLDCREATEBITMAP_ARGS])
		{
			b->Create(layer, h, w);
		}
		else
		{
			b->Create(layer, w, h);
		}
	}
	void fullblit(int layer, bitmap dest, bitmap src)
	{
		int w = Min(dest->Width, src->Width),
		    h = Min(dest->Height, src->Height);
		src->Blit(layer, dest, 0, 0, w, h, 0, 0, w, h, 0, 0, 0, 0, 0, true);
	}
	void fullblit(int layer, bitmap dest, bitmap src, int dx, int dy)
	{
		int w = Min(dest->Width, src->Width),
		    h = Min(dest->Height, src->Height);
		src->Blit(layer, dest, 0, 0, w, h, dx, dy, w, h, 0, 0, 0, 0, 0, true);
	}
	void moveblit(int layer, bitmap dest, bitmap src, int width, int height)
	{
		src->Blit(layer, dest, 0, 0, width, height, 0, 0, width, height, 0, 0, 0, 0, 0, true);
	}
}