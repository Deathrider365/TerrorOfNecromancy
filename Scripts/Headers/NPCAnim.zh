//NPCAnim.zh ver 1.2.0

namespace NPCAnim{
	CONFIG NPCM_ANIMPOINTER = 15; //Index for storing the animation pointer in NPC->Misc[]
	CONFIG ANIM_BUFFER_LENGTH = 1024; //Arbitrary size for NPC animation array
	CONFIG ANIM_WALKABILITY_MAXLAYER = 2; //Max layer to check for combo types
		
	CONFIGB NEW_NPC_DEATHANIM = false; //If true, the death animation flickers the enemy before it disappears. This is mostly toggleable because ghost doesn't do this.
	CONFIGB RESIZE_ON_DEATH = true; //If true, the enemy scales down to 1x1 and centers on death
	CONFIGB QUIT_ON_DEATH = true; //If true, the script quits on the frame the enemy dies
	CONFIGB DEBUG_COLLISION_HITBOX = false; //If true, the enemy's collision hitbox will be drawn to the screen

	//User defined function for custom pixel collisions, accessed when moveStyle is negative
	bool CanMovePixelCustom(int x, int y, int moveStyle){
		//Define your own behavior here
	}
	
	//Constants for indices within individual animations
	enum AnimDefIndex{
		ADI_VALID,
		ADI_TILE,
		ADI_NUMFRAMES,
		ADI_ASPEED,
		ADI_NEXT,
		ADI_LOOPFRAME,
		ADI_FLAGS,
		ADI_TILEW,
		ADI_TILEH,
		ADI_HITXOFF,
		ADI_HITYOFF,
		ADI_HITWIDTH,
		ADI_HITHEIGHT,
		ADI_COLL_HITXOFF,
		ADI_COLL_HITYOFF,
		ADI_COLL_HITWIDTH,
		ADI_COLL_HITHEIGHT,
		ADI_DRAWXOFF,
		ADI_DRAWYOFF,
		ADI_POSXOFF,
		ADI_POSYOFF,
		ADI_EXFLAGS,
		ADI_END
	};
	
	//Constants for move styles
	enum AnimMoveStyle{
		AM_NONE,
		AM_FLIER,
		AM_WATERONLY,
		AM_DEEPWATERONLY,
		AM_PITONLY,
		AM_IGNOREALL,
		AM_IGNOREALLOFFSCREEN
	};
	
	enum AnimFlags{
		ADF_4WAY 			= 0x01, //Animation is 4-directional
		ADF_8WAY 			= 0x02, //Animation is 8-directional
		ADF_FLIPRIGHT 		= 0x04, //Left facing animations are flipped when facing right
		ADF_NOLOOP 			= 0x08, //The animation doesn't loop when it ends
		ADF_NORELATIVE 		= 0x10, //Animation frames are absolute tile values rather than relative to the enemy's original tile
		ADF_NORESET 		= 0x20, //Animation frame doesn't reset on changing animations
		ADF_REVERSE 		= 0x40, //Animation plays in reverse
		ADF_VERTICAL 		= 0x80 //Vertical 4-directional and 8-directional animations
	};
	
	enum AnimExtendFlags{
		ADFX_HITOFF			= 0x01, // Animation uses hit offsets
		ADFX_COLLOFF		= 0x02, // Animation uses collision offsets
		ADFX_DRAWOFF		= 0x04, // Animation uses draw offsets
		ADFX_POSOFF			= 0x08 // Animation uses position offsets
	};
	
	class AnimHandler{
		AnimHandler(npc n){
			Owner = n;
			n->Misc[NPCM_ANIMPOINTER] = this;
			
			OriginalTile = n->OriginalTile;
			AnimSpeedMultiplier = 1;
			
			CollXOff = 0;
			CollYOff = 0;
			CollWidth = 16;
			CollHeight = 16;
			
			Base_HitXOff = 0;
			Base_HitYOff = 0;
			Base_HitWidth = 16;
			Base_HitHeight = 16;
			
			Base_CollXOff = 0;
			Base_CollYOff = 0;
			Base_CollWidth = 16;
			Base_CollHeight = 16;
		}
		
		// Update an NPC's animation for the frame
		void Update(){
			//Skip updates if the enemy is invisible
			if(CurAnim==-1)
				return;
		
			int aTile = GetAnimProperty(CurAnim, ADI_TILE);
			int maxFrame = GetAnimProperty(CurAnim, ADI_NUMFRAMES);
			int maxClock = GetAnimProperty(CurAnim, ADI_ASPEED);
			int nextAnim = GetAnimProperty(CurAnim, ADI_NEXT);
			int loopFrame = GetAnimProperty(CurAnim, ADI_LOOPFRAME);
			int flags = GetAnimProperty(CurAnim, ADI_FLAGS);
			int curFrame = CurFrame;
			if(AnimSpeedMultiplier){
				maxClock = Ceiling(maxClock/AnimSpeedMultiplier);
			}
			
			//If using a 4 or 8 directional animation, only update direction when it's valid
			if(flags&ADF_8WAY){
				if(Owner->Dir>=0&&Owner->Dir<8)
					Dir = Owner->Dir;
				
				//Update the frame based on direction
				curFrame += Dir*maxFrame;
				//Rearrange the animation order to remove right facing frames when the flip flag is on
				//This is kinda messy... :/
				if(flags&ADF_FLIPRIGHT){
					switch(Dir){
						case DIR_RIGHT: 
						case DIR_LEFTUP:
							curFrame -= maxFrame; 
							break;
						case DIR_LEFTDOWN:
						case DIR_RIGHTUP:
							curFrame -= maxFrame*2;
							break;
						case DIR_RIGHTDOWN:
							curFrame -= maxFrame*3;
							break;
					}
				}
			}
			else if(flags&ADF_4WAY){
				if(Owner->Dir>=0&&Owner->Dir<4)
					Dir = Owner->Dir;
				//Update the frame based on direction
				curFrame += Dir*maxFrame;
				if(flags&ADF_FLIPRIGHT){
					if(Dir==DIR_RIGHT)
						curFrame -= maxFrame;
				}
			}
			else{
				Dir = Owner->Dir;
			}
			
			//Relative animations will use an offset from the enemy's original tile instead of absolute tile numbers
			if(!(flags&ADF_NORELATIVE))
				aTile += OriginalTile;
			
			//Apply a tile flip when facing right if the flag is set
			if(flags&ADF_FLIPRIGHT){
				Owner->ScriptFlip = 0;
				if(flags&ADF_8WAY){
					if(Dir==DIR_RIGHT||Dir==DIR_RIGHTUP||Dir==DIR_RIGHTDOWN)
						Owner->ScriptFlip = 1;
				}
				else if(flags&ADF_4WAY){
					if(Dir==DIR_RIGHT)
						Owner->ScriptFlip = 1;
				}
				else
					Owner->ScriptFlip  = 1;
			}
			
			//Apply an extra offset to vertical animations
			int vertYOff;
			if(flags&ADF_VERTICAL){
				vertYOff = Owner->TileHeight * Floor(curFrame / maxFrame) * 20;
				curFrame %= maxFrame;
			}
			
			//Set the enemy's tile based on the current frame of its animation
			int til = aTile + curFrame*Owner->TileWidth + Floor((curFrame*Owner->TileWidth)/20)*20*(Owner->TileHeight-1) + vertYOff;
			Owner->OriginalTile = til;
			Owner->Tile = til;
			
			//Update the tile animation
			if(AnimSpeedMultiplier>0) //If animation isn't suspended
				++AnimClock;
			if(AnimClock>=maxClock){
				if(flags&ADF_REVERSE)
					--CurFrame;
				else
					++CurFrame;
				bool loop;
				if(flags&ADF_REVERSE){
					if(CurFrame<0)
						loop = true;
				}
				else{
					if(CurFrame>=maxFrame)
						loop = true;
				}
				if(loop){
					AnimFinished = true;
					//If not a looping animation, repeat the last frame on loop
					if(flags&ADF_NOLOOP){
						if(flags&ADF_REVERSE)
							CurFrame = 0;
						else
							CurFrame = maxFrame-1;
					}
					//If it links into a new animation, play that
					else if(nextAnim>-1){
						CurFrame = (flags&ADF_REVERSE)?maxFrame-1:0;
						CurAnim = nextAnim;
						AnimFinished = false;
					}
					else
						CurFrame = (flags&ADF_REVERSE)?maxFrame-1-loopFrame:loopFrame;
				}
				AnimClock = 0;
			}
			
			//Update shadows
			if(ShadowTile){
				if(Owner->Z>0||Owner->FakeZ>0){
					int layer = 2;
					if(ScreenFlag(1, 4)) //Layer -2
						layer = 1;
					
					int w = ShadowW;
					int h = ShadowH;
					int x = CenterX(Owner)-w*8;
					int y = Owner->Y+Owner->TileWidth*16-h*16+ShadowYOff;
					int frame = Floor(ShadowClock/ShadowASpeed);
					int til = ShadowTile + frame*w + Floor((frame*w)/20)*20*(h-1);
					if(Link->HP>0)
						Screen->DrawTile(layer, x, y, til, w, h, ShadowCSet, -1, -1, 0, 0, 0, 0, true, Game->FFRules[qr_TRANSSHADOWS]?OP_TRANS:OP_OPAQUE);
					
					++ShadowClock;
					if(ShadowClock>=ShadowNumFrames*ShadowASpeed)
						ShadowClock = 0;
				}
			}
		}

		// Get/setting animation properties in the array
		int GetAnimProperty(int animID, int prop){
			return __Anims[ADI_END*animID+prop];
		}
		int SetAnimProperty(int animID, int prop, int value){
			__Anims[ADI_END*animID+prop] = value;
		}

		//Draws the enemy's collision hitbox to the screen
		void __DrawCollisionDebugHitbox(){
			if(!DEBUG_COLLISION_HITBOX)
				return;
			
			int x = Owner->X+CollXOff;
			int y = Owner->Y+CollYOff;
			int x2 = x+CollWidth-1;
			int y2 = y+CollHeight-1;
			Screen->Rectangle(6, x, y, x2, y2, Owner->CSet*16+1, 1, 0, 0, 0, false, 128);
		}
	
		// Sets an enemy's tile width and height and shaves pixels off the edges of its hitbox
		// int w,h - The width and height of the enemy in tiles
		// int hitOffsets[] - An array of four hit offsets
		void SetHitbox(int w, int h, int hitOffsets=0, bool center=false){
			Owner->Extend = EXT_NORMAL;
			Owner->HitXOffset = 0;
			Owner->HitYOffset = 0;
			Owner->TileWidth = w;
			Owner->TileHeight = h;
			Owner->HitWidth = w*16;
			Owner->HitHeight = h*16;
			if(hitOffsets>0){
				if(SizeOfArray(hitOffsets)!=4)
					printf("[NPCANIM ERROR] SetHitbox() array hitOffsets[] should be size 4");
				else{
					Owner->HitXOffset += hitOffsets[2];
					Owner->HitWidth -= hitOffsets[2];
					Owner->HitWidth -= hitOffsets[3];
					Owner->HitYOffset += hitOffsets[0];
					Owner->HitHeight -= hitOffsets[0];
					Owner->HitHeight -= hitOffsets[1];
				}
			}
			
			CollXOff = Owner->HitXOffset;
			CollYOff = Owner->HitYOffset;
			CollWidth = Owner->HitWidth;
			CollHeight = Owner->HitHeight;
			
			Base_TileW = w;
			Base_TileH = h;
			
			Base_HitXOff = Owner->HitXOffset;
			Base_HitYOff = Owner->HitYOffset;
			Base_HitWidth = Owner->HitWidth;
			Base_HitHeight = Owner->HitHeight;
			
			Base_CollXOff = Owner->HitXOffset;
			Base_CollYOff = Owner->HitYOffset;
			Base_CollWidth = Owner->HitHeight;
			Base_CollHeight = Owner->HitWidth;
			
			if(center)
				CenterHitbox();
		}
		
		// Sets the enemy's movement collision hitbox, based on its tile width and height
		void SetMovementHitbox(int collOffsets, bool center=false){
			CollXOff = 0;
			CollYOff = 0;
			CollWidth = Owner->TileWidth*16;
			CollHeight = Owner->TileHeight*16;
			if(SizeOfArray(collOffsets)!=4)
				printf("[NPCANIM ERROR] SetMovementHitbox() array collOffsets[] should be size 4");
			else{
				CollXOff += collOffsets[2];
				CollWidth -= collOffsets[2];
				CollWidth -= collOffsets[3];
				CollYOff += collOffsets[0];
				CollHeight -= collOffsets[0];
				CollHeight -= collOffsets[1];
			}
			
			Base_CollXOff = CollXOff;
			Base_CollYOff = CollYOff;
			Base_CollWidth = CollWidth;
			Base_CollHeight = CollHeight;
			
			if(center)
				CenterHitbox();
		}
		
		// Centers the enemy's hitbox on the tile after spawning
		void CenterHitbox(){
			int cx = CollXOff + CollWidth/2;
			int cy = CollYOff + CollHeight/2;
			
			Owner->X -= cx-8;
			Owner->Y -= cy-8;
		}
		
		// Adds a new animation to the Anims array
		// int animID - The ID to assign the animation to, if -1 will fetch a new ID and return the value
		// int tile - The tile for the animation, relative to the enemy's original tile by default
		// int numFrames - How many frames of animation to use
		// int aSpeed - How many clock ticks (60ths of a second) each animation frame takes
		// int loopFrame - Which frame to loop to when the animation ends
		// int nextAnim - Which animation to switch to when the animation ends (-1 for none)
		// int flags - The sum of all ADF_ flags to use
		int AddAnim(int animID, int tile, int numFrames, int aSpeed, int loopFrame, int nextAnim, int flags){
			int tmp_animID = animID;
			if(animID==-1)
				tmp_animID = NumAnims;
			
			int arraySize = SizeOfArray(__Anims);
			if((tmp_animID+1)*ADI_END>arraySize){
				printf("[NPCANIM ERROR] Not enough room in animation buffer for animation.\nAnimation ID: %d\nBuffer size: %d\n", tmp_animID, arraySize);
				return -1;
			}
			
			SetAnimProperty(tmp_animID, ADI_VALID, 1);
			SetAnimProperty(tmp_animID, ADI_TILE, tile);
			SetAnimProperty(tmp_animID, ADI_NUMFRAMES, numFrames);
			SetAnimProperty(tmp_animID, ADI_ASPEED, aSpeed);
			SetAnimProperty(tmp_animID, ADI_LOOPFRAME, loopFrame);
			SetAnimProperty(tmp_animID, ADI_NEXT, nextAnim);
			SetAnimProperty(tmp_animID, ADI_FLAGS, flags);
			
			if(animID==-1)
				++NumAnims;
			else
				NumAnims = Max(NumAnims, animID+1);
			return tmp_animID;
		}
		int AddAnim(int animID, int tile, int numFrames, int aSpeed, int loopFrame, int flags){
			return AddAnim(animID, tile, numFrames, aSpeed, loopFrame, -1, flags);
		}
		int AddAnim(int animID, int tile, int numFrames, int aSpeed, int flags){
			if(flags&ADF_REVERSE)
				return AddAnim(animID, tile, numFrames, aSpeed, numFrames-1, -1, flags);
			else
				return AddAnim(animID, tile, numFrames, aSpeed, 0, -1, flags);
		}
		
		// Adds extended information to an animation in the Anims array
		// int animID - The animation to add information to (this is assuming the animation has already been declared)
		// int tileW,tileH - The width and height of the animation in tiles
		// int hitOffsets[] - An array of four hit offsets {top, bottom, left, right}. 0 for none
		// int collOffsets[] - An array of four collision offsets (for terrain). Same as above, 0 for none
		// int drawOffsets[] - An array of two draw offsets {x, y}. 0 for none
		// int posOffsets[] - An array of two position offsets {x, y}. 0 for none
		void ExtendAnim(int animID, int tileW, int tileH, int hitOffsets, int collOffsets, int drawOffsets, int posOffsets){
			if(animID>-1){
				int exflags = 0;
				SetAnimProperty(animID, ADI_TILEW, tileW);
				SetAnimProperty(animID, ADI_TILEH, tileH);
				if(hitOffsets>0){
					if(SizeOfArray(hitOffsets)!=4)
						printf("[NPCANIM ERROR] ExtendAnim() array hitOffsets[] should be size 4");
					else{
						int hitW = tileW*16;
						int hitH = tileH*16;
						int xOff; int yOff;
						xOff += hitOffsets[2];
						hitW -= hitOffsets[2];
						hitW -= hitOffsets[3];
						yOff += hitOffsets[0];
						hitH -= hitOffsets[0];
						hitH -= hitOffsets[1];
						SetAnimProperty(animID, ADI_HITXOFF, xOff);
						SetAnimProperty(animID, ADI_HITYOFF, yOff);
						SetAnimProperty(animID, ADI_HITWIDTH, hitW);
						SetAnimProperty(animID, ADI_HITHEIGHT, hitH);
						exflags |= ADFX_HITOFF;
					}
				}
				if(collOffsets>0){
					if(SizeOfArray(collOffsets)!=4)
						printf("[NPCANIM ERROR] ExtendAnim() array collOffsets[] should be size 4");
					else{
						int hitW = tileW*16;
						int hitH = tileH*16;
						int xOff; int yOff;
						xOff += collOffsets[2];
						hitW -= collOffsets[2];
						hitW -= collOffsets[3];
						yOff += collOffsets[0];
						hitH -= collOffsets[0];
						hitH -= collOffsets[1];
						SetAnimProperty(animID, ADI_COLL_HITXOFF, xOff);
						SetAnimProperty(animID, ADI_COLL_HITYOFF, yOff);
						SetAnimProperty(animID, ADI_COLL_HITWIDTH, hitW);
						SetAnimProperty(animID, ADI_COLL_HITHEIGHT, hitH);
						exflags |= ADFX_COLLOFF;
					}
				}
				//If hit offsets are set, also update terrain collision offsets to be safe
				else if(hitOffsets!=0){ 
					SetAnimProperty(animID, ADI_COLL_HITXOFF, GetAnimProperty(animID, ADI_HITXOFF));
					SetAnimProperty(animID, ADI_COLL_HITYOFF, GetAnimProperty(animID, ADI_HITYOFF));
					SetAnimProperty(animID, ADI_COLL_HITWIDTH, GetAnimProperty(animID, ADI_HITWIDTH));
					SetAnimProperty(animID, ADI_COLL_HITHEIGHT, GetAnimProperty(animID, ADI_HITHEIGHT));
					exflags |= ADFX_COLLOFF;
				}
				if(drawOffsets>0){
					if(SizeOfArray(drawOffsets)!=2)
						printf("[NPCANIM ERROR] ExtendAnim() array drawOffsets[] should be size 2");
					else{
						SetAnimProperty(animID, ADI_DRAWXOFF, drawOffsets[0]);
						SetAnimProperty(animID, ADI_DRAWYOFF, drawOffsets[1]);
						exflags |= ADFX_DRAWOFF;
					}
				}
				if(posOffsets>0){
					if(SizeOfArray(posOffsets)!=2)
						printf("[NPCANIM ERROR] ExtendAnim() array posOffsets[] should be size 2");
					else{
						SetAnimProperty(animID, ADI_POSXOFF, posOffsets[0]);
						SetAnimProperty(animID, ADI_POSYOFF, posOffsets[1]);
						exflags |= ADFX_POSOFF;
					}
				}
				SetAnimProperty(animID, ADI_EXFLAGS, exflags);
			}
		}
	
		// Sets the enemy to draw a fake shadow
		// int spr - The sprite in Sprite Data to use for the shadow, 0 to remove it
		// int w,h - The width and height in tiles
		// offset - An extra Y offset for adjusting the shadow's position
		void SetFakeShadow(int spr, int w=1, int h=1, int offset=0){
			if(spr<=0){
				ShadowTile = 0;
				return;
			}
			
			// Let's make sure a second shadow doesn't get drawn over the fake one
			Owner->Extend = EXT_NOSHADOW;
			
			w = Max(w, 1);
			h = Max(h, 1);
			
			spritedata sd = Game->LoadSpriteData(spr);
			
			ShadowTile = sd->Tile;
			ShadowCSet = sd->CSet;
			ShadowW = w;
			ShadowH = h;
			ShadowNumFrames = sd->Frames;
			ShadowASpeed = sd->Speed;
			ShadowYOff = offset;
			ShadowClock = 0;
		}
	
		// Play a new animation
		// int animID - Which animation to play. -1 will make the enemy invisible
		// bool noReset - If true, the current frame of animation won't reset even if the ADF_NORESET flag isn't set on the previous animation
		void PlayAnim(int animID, bool noReset=false){
			// If set to ID -1, make invisible and quit
			if(animID==-1){
				Owner->DrawXOffset = -1000;
				Owner->CollDetection = false;
				CurAnim = -1;
				return;
			}
			
			int arraySize = SizeOfArray(__Anims);
			if(animID>=NumAnims||(animID+1)*ADI_END>arraySize){
				printf("[NPCANIM ERROR] Attempted to play an animation outside of the animation buffer. (%d)", animID);
				return;
			}
			if(!GetAnimProperty(animID, ADI_VALID)){
				printf("[NPCANIM ERROR] Attempted to play an undefined animation. (%d)", animID);
				return;
			}
			int aTile = GetAnimProperty(animID, ADI_TILE);
			int maxFrame = GetAnimProperty(animID, ADI_NUMFRAMES);
			int maxClock = GetAnimProperty(animID, ADI_ASPEED);
			int nextAnim = GetAnimProperty(animID, ADI_NEXT);
			int loopFrame = GetAnimProperty(animID, ADI_LOOPFRAME);
			int flags = GetAnimProperty(animID, ADI_FLAGS);
			
			int old_flags;
			// If it was invisible, turn visibility and collision back on
			if(CurAnim==-1){
				Owner->DrawXOffset = 0;
				Owner->CollDetection = true;
			}
			else
				old_flags = GetAnimProperty(CurAnim, ADI_FLAGS);
				
			int oldAnim = CurAnim;
			// If the old animation had advanced properties, undo them
			if(GetAnimProperty(oldAnim, ADI_TILEW)){
				int exflags = GetAnimProperty(oldAnim, ADI_EXFLAGS);
				
				Owner->TileWidth = Base_TileW;
				Owner->TileHeight = Base_TileH;
				
				if(exflags&ADFX_POSOFF){
					Owner->X -= GetAnimProperty(oldAnim, ADI_POSXOFF);
					Owner->Y -= GetAnimProperty(oldAnim, ADI_POSYOFF);
				}
				
				if(exflags&ADFX_DRAWOFF){
					Owner->DrawXOffset -= GetAnimProperty(oldAnim, ADI_DRAWXOFF);
					Owner->DrawYOffset -= GetAnimProperty(oldAnim, ADI_DRAWYOFF);
				}
				
				if(exflags&ADFX_HITOFF){
					Owner->HitXOffset = Base_HitXOff;
					Owner->HitYOffset = Base_HitYOff;
					Owner->HitWidth = Base_HitWidth;
					Owner->HitWidth = Base_HitHeight;
				}
				
				if(exflags&ADFX_COLLOFF){
					CollXOff = Base_CollXOff;
					CollYOff = Base_CollYOff;
					CollWidth = Base_CollWidth;
					CollHeight = Base_CollHeight;
				}
			}
			// If the new animation has advanced properties, set them
			if(GetAnimProperty(animID, ADI_TILEW)){
				int exflags = GetAnimProperty(animID, ADI_EXFLAGS);
				
				Owner->TileWidth = GetAnimProperty(animID, ADI_TILEW);
				Owner->TileHeight = GetAnimProperty(animID, ADI_TILEH);
				
				if(exflags&ADFX_POSOFF){
					Owner->X += GetAnimProperty(animID, ADI_POSXOFF);
					Owner->Y += GetAnimProperty(animID, ADI_POSYOFF);
				}
				
				if(exflags&ADFX_DRAWOFF){
					Owner->DrawXOffset += GetAnimProperty(animID, ADI_DRAWXOFF);
					Owner->DrawYOffset += GetAnimProperty(animID, ADI_DRAWYOFF);
				}
				
				if(exflags&ADFX_HITOFF){
					Owner->HitXOffset = GetAnimProperty(animID, ADI_HITXOFF);
					Owner->HitYOffset = GetAnimProperty(animID, ADI_HITYOFF);
					Owner->HitWidth = GetAnimProperty(animID, ADI_HITWIDTH);
					Owner->HitHeight = GetAnimProperty(animID, ADI_HITHEIGHT);
				}
				
				if(exflags&ADFX_COLLOFF){
					CollXOff = GetAnimProperty(animID, ADI_COLL_HITXOFF);
					CollYOff = GetAnimProperty(animID, ADI_COLL_HITYOFF);
					CollWidth = GetAnimProperty(animID, ADI_COLL_HITWIDTH);
					CollHeight = GetAnimProperty(animID, ADI_COLL_HITHEIGHT);
				}
			}
				
			Owner->ScriptFlip = -1;
			
			CurAnim = animID;
			if(old_flags&ADF_NORESET||noReset){
				//If the animation doesn't reset, keep the values clamped to the new animation length
				if(flags&ADF_REVERSE){
					int maxFrame2 = maxFrame-loopFrame;
					CurFrame = Clamp(loopFrame-CurFrame, maxFrame2, maxFrame-1);
				}
				else{
					int maxFrame2 = maxFrame-loopFrame;
					CurFrame = Clamp(loopFrame+CurFrame, 0, maxFrame2);
				}
				AnimClock = Clamp(AnimClock, 0, maxClock);
			}
			else{
				CurFrame = (flags&ADF_REVERSE)?maxFrame-1:0;
				AnimClock = 0;
			}
			AnimFinished = false;
		}
		
		//Plays an exploding death animation
		void PlayDeathAnim(int spr=0, int w=0, int h=0, int sfx=0, bool freeze=false){
			Owner->Immortal = true;
			Owner->CollDetection = false;
			npcdata nd = Game->LoadNPCData(Owner->ID);
			Game->PlaySound(nd->DeathSFX);
			if(freeze)
				AnimSpeedMultiplier = 0;
			int redrawXOffset = Owner->DrawXOffset;
			int redrawYOffset = Owner->DrawYOffset;
			Owner->DrawXOffset = -1000;
			Owner->DrawYOffset = -1000;
			int redrawLayer = 2;
			if(ScreenFlag(1, 4)) //Layer -2
				redrawLayer = 1;
			
			for(int i=0; i<15; ++i){
				int x = Owner->X+Rand(-8, 16*Owner->TileWidth-8)+redrawXOffset;
				int y = Owner->Y+Rand(-8, 16*Owner->TileHeight-8)+redrawYOffset-Owner->Z-Owner->FakeZ;
				if(spr){
					w = Max(w, 1);
					h = Max(h, 1);
					if(sfx)
						Game->PlaySound(sfx);
					lweapon l = CreateLWeaponAt(LW_SPARKLE, x, y);
					l->UseSprite(spr);
					l->Extend = EXT_NORMAL;
					l->TileWidth = w;
					l->TileHeight = h;
					l->DrawXOffset -= (w-1)*8;
					l->DrawYOffset -= (h-1)*8;
					l->DrawStyle = DS_LINK;
				}
				else{
					lweapon l = CreateLWeaponAt(LW_BOMBBLAST, x, y);
					l->CollDetection = false;
					l->DrawStyle = DS_LINK;
				}
				for(int j=0; j<16; ++j){
					int tile = (Owner->ScriptTile>-1)?Owner->ScriptTile:Owner->Tile;
					int flip = (Owner->ScriptFlip>-1)?Owner->ScriptFlip:0;
					if(j%4<2||i<12||!NEW_NPC_DEATHANIM)
						Screen->DrawTile(redrawLayer, Owner->X+redrawXOffset, Owner->Y+redrawYOffset-Owner->Z-Owner->FakeZ, tile, Owner->TileWidth, Owner->TileHeight, Owner->CSet, -1, -1, 0, 0, 0, flip, true, OP_OPAQUE);
					Waitframe(Owner);
				}
			}
			Owner->Immortal = false;
			Owner->HP = HP_SILENT;
			Owner->X+=(Owner->TileWidth-1)*8;
			Owner->Y+=(Owner->TileHeight-1)*8;
			Quit();
		}
		void PlayDeathAnim(bool freeze=false){
			PlayDeathAnim(0, 0, 0, 0, freeze);
		}
		
		npc Owner;
		int __Anims[ANIM_BUFFER_LENGTH];
		
		int CurAnim;
		int NumAnims;
		
		int CurFrame;
		int AnimClock;
		int Dir;
		int OriginalTile;
		bool AnimFinished;
		int AnimSpeedMultiplier;
		float __SubpixelX;
		float __SubpixelY;
		
		// Shadows
		int ShadowTile;
		int ShadowCSet;
		int ShadowW;
		int ShadowH;
		int ShadowNumFrames;
		int ShadowASpeed;
		int ShadowYOff;
		int ShadowClock;
		
		// Offsets for collision with terrain
		int CollXOff;
		int CollYOff;
		int CollWidth;
		int CollHeight;
		
		// Base offsets for the enemy before animations get involved
		int Base_TileW;
		int Base_TileH;
		int Base_HitXOff;
		int Base_HitYOff;
		int Base_HitWidth;
		int Base_HitHeight;
		int Base_CollXOff;
		int Base_CollYOff;
		int Base_CollWidth;
		int Base_CollHeight;
	}
	
	// Get the AnimHandler pointer off an enemy
	AnimHandler GetAnimHandler(npc n){
		return n->Misc[NPCM_ANIMPOINTER];
	}
	
	// Turns the enemy to face Link
	void FaceLink(npc n, bool eightDirectional=false){
		if(eightDirectional)
			n->Dir = AngleDir8(Angle(CenterX(n)-8, CenterY(n)-8, Link->X, Link->Y));
		else
			n->Dir = AngleDir4(Angle(CenterX(n)-8, CenterY(n)-8, Link->X, Link->Y));
	}
	// Turns the enemy to face a point
	void FacePoint(npc n, int x, int y, bool eightDirectional=false){
		if(eightDirectional)
			n->Dir = AngleDir8(Angle(n->X, n->Y, x, y));
		else
			n->Dir = AngleDir4(Angle(n->X, n->Y, x, y));
	}
	
	// Waits for the enemy's engine spawn animation to play
	void WaitSpawn(npc n){
		if(Game->FFRules[qr_HARDCODED_ENEMY_ANIMS]){
			while(n->Frame<0){
				Waitframe();
			}
		}
		else{
			spritedata sd = Game->LoadSpriteData(n->SpawnSprite);
			Waitframes(sd->Frames*sd->Speed-1);
		}
	}
	
	// Simple waitframe function that also calls the animation update
	void Waitframe(npc n){
		AnimHandler ah = n->Misc[NPCM_ANIMPOINTER];
		
		ah->__DrawCollisionDebugHitbox();
		ah->Update();
		if(RESIZE_ON_DEATH&&n->HP<=0&&!n->Immortal){
			n->X = CenterX(n)-8;
			n->Y = CenterY(n)-8;
			n->TileWidth = 1;
			n->TileHeight = 1;
			if(QUIT_ON_DEATH)
				Quit();
		}
		Waitframe();
	}
	void Waitframe(npc n, int frames){
		for(int i=0; i<frames; ++i)
			Waitframe(n);
	}
	// Wait for the current animation to finish
	void Waitanim(npc n){
		AnimHandler ah = n->Misc[NPCM_ANIMPOINTER];
		
		while(!ah->AnimFinished)
			Waitframe(n);
	}
	void Waitanim(npc n, int animID){
		AnimHandler ah = n->Misc[NPCM_ANIMPOINTER];
		
		while(ah->CurAnim==animID)
			Waitframe(n);
	}

	// Returns true if an enemy can walk onto a pixel
	bool CanMovePixel(int x, int y, int moveStyle){
		if(moveStyle<0)
			return CanMovePixelCustom(x, y, moveStyle);
		
		int pos = ComboAt(x, y);
		
		bool solid = Screen->isSolid(x, y);
		bool offscreen = x<0||x>255||y<0||y>175;
		bool water;
		bool shallowwater;
		bool pitfall;
		bool warp;
		bool noenemy;
		bool nofly;
		bool noground;
		//Cycle over layers 0, 1, and 2 for combo types and flags that can affect movement
		for(int i=0; i<=ANIM_WALKABILITY_MAXLAYER; ++i){
			mapdata lyr = Game->LoadTempScreen(i);
			switch(lyr->ComboT[pos]){
				case CT_WATER:
				case CT_SWIMWARP:
				case CT_DIVEWARP:
				case CT_SWIMWARPB...CT_DIVEWARPD:
					water = true;
					break;
				case CT_SHALLOWWATER:
					shallowwater = true;
					break;
				case CT_PITFALL:
					pitfall = true;
					break;
				case CT_NOENEMY:
					noenemy = true;
					break;
				case CT_NOFLYZONE:
					nofly = true;
					break;
				case CT_STAIR:
				case CT_STAIRB...CT_STAIRD:
				case CT_STAIRR:
				case CT_PIT:
				case CT_PITB...CT_PITD:
				case CT_SWARPA...CT_SWARPR:
					warp = true;
					break;
			}
			for(int j=0; j<2; ++j){
				int flag = lyr->ComboF[pos];
				if(j==1)
					flag = lyr->ComboI[pos];
				switch(flag){
					case CF_NOENEMY:
						noenemy = true;
						break;
					case CF_NOGROUNDENEMY:
						noground = true;
						break;
				}
			}
		}
		
		switch(moveStyle){
			case AM_NONE:
				return !(solid||offscreen||water||pitfall||warp||noenemy||noground);
			case AM_FLIER:
				return !(offscreen||noenemy||nofly);
			case AM_WATERONLY:
				return !(solid||offscreen||noenemy||noground)&&(water||shallowwater);
			case AM_DEEPWATERONLY:
				return !(solid||offscreen||noenemy||noground)&&water;
			case AM_PITONLY:
				return !(solid||offscreen||noenemy||noground)&&pitfall;
			case AM_IGNOREALL:
				return !offscreen;
			case AM_IGNOREALLOFFSCREEN:
				return true;
		}
	}
	// Returns true if an enemy can move one pixel in the given direction
	bool CanMove(npc n, int dir, int moveStyle){
		AnimHandler ah = n->Misc[NPCM_ANIMPOINTER];
		
		int xOff = n->HitXOffset;
		int yOff = n->HitYOffset;
		int collWidth = n->HitWidth;
		int collHeight = n->HitHeight;
		if(ah->CollWidth>0&&ah->CollHeight>0){
			xOff = ah->CollXOff;
			yOff = ah->CollYOff;
			collWidth = ah->CollWidth;
			collHeight = ah->CollHeight;
		}
		int x = n->X+xOff;
		int y = n->Y+yOff;
		int w = collWidth-1;
		int h = collHeight-1;
		switch(dir){
			case DIR_UP:
				for(int i=0; i<=w; i=Min(i+8, w)){
					if(!CanMovePixel(x+i, y-1, moveStyle))
						return false;
					if(i==w)
						break;
				}
				break;
			case DIR_DOWN:
				for(int i=0; i<=w; i=Min(i+8, w)){
					if(!CanMovePixel(x+i, y+h+1, moveStyle))
						return false;
					if(i==w)
						break;
				}
				break;
			case DIR_LEFT:
				for(int i=0; i<=h; i=Min(i+8, h)){
					if(!CanMovePixel(x-1, y+i, moveStyle))
						return false;
					if(i==h)
						break;
				}
				break;
			case DIR_RIGHT:
				for(int i=0; i<=h; i=Min(i+8, h)){
					if(!CanMovePixel(x+w+1, y+i, moveStyle))
						return false;
					if(i==h)
						break;
				}
				break;
		}
		return true;
	}
	// Returns true if an enemy can move one pixel in the given direction (8-way)
	bool CanMove8(npc n, int dir, int moveStyle, bool reqBoth=false){
		bool cond1;
		bool cond2;
		switch(dir){
			case DIR_LEFTUP:
				cond1 = !CanMove(n, DIR_LEFT, moveStyle);
				cond2 = !CanMove(n, DIR_UP, moveStyle);
				break;
			case DIR_RIGHTUP:
				cond1 = !CanMove(n, DIR_RIGHT, moveStyle);
				cond2 = !CanMove(n, DIR_UP, moveStyle);
				break;
			case DIR_LEFTDOWN:
				cond1 = !CanMove(n, DIR_LEFT, moveStyle);
				cond2 = !CanMove(n, DIR_DOWN, moveStyle);
				break;
			case DIR_RIGHTDOWN:
				cond1 = !CanMove(n, DIR_RIGHT, moveStyle);
				cond2 = !CanMove(n, DIR_DOWN, moveStyle);
				break;
			default:
				cond1 = !CanMove(n, dir, moveStyle);
				cond2 = cond1;
		}
		if(reqBoth)
			return !(cond1&&cond2);
		return !(cond1||cond2);
	}
	// Returns true if an enemy can be placed at the target position
	bool CanPlace(npc n, int x, int y, int moveStyle){
		AnimHandler ah = n->Misc[NPCM_ANIMPOINTER];
		
		int xOff = n->HitXOffset;
		int yOff = n->HitYOffset;
		int collWidth = n->HitWidth;
		int collHeight = n->HitHeight;
		if(ah->CollWidth>0&&ah->CollHeight>0){
			xOff = ah->CollXOff;
			yOff = ah->CollYOff;
			collWidth = ah->CollWidth;
			collHeight = ah->CollHeight;
		}
		int xx = x+xOff;
		int yy = y+yOff;
		int w = collWidth-1;
		int h = collHeight-1;
		for(int xi=0; xi<=w; xi=Min(xi+8, w)){
			for(int yi=0; yi<=h; yi=Min(yi+8, h)){
				if(!CanMovePixel(xx+xi, yy+yi, moveStyle))
					return false;
				if(yi==h)
					break;
			}
			if(xi==w)
				break;
		}
		return true;
	}
	// Same as above but lets you define the hitbox size
	bool CanPlace(npc n, int x, int y, int w, int h, int moveStyle){
		AnimHandler ah = n->Misc[NPCM_ANIMPOINTER];
		
		int xx = x;
		int yy = y;
		w -= 1;
		h -= 1;
		for(int xi=0; xi<=w; xi=Min(xi+8, w)){
			for(int yi=0; yi<=h; yi=Min(yi+8, h)){
				if(!CanMovePixel(xx+xi, yy+yi, moveStyle))
					return false;
				if(yi==h)
					break;
			}
			if(xi==w)
				break;
		}
		return true;
	}
	// Moves the enemy on the X and Y axis
	void MoveXY(npc n, int vx, int vy, int moveStyle){
		AnimHandler ah = n->Misc[NPCM_ANIMPOINTER];
		
		ah->__SubpixelX += vx;
		ah->__SubpixelY += vy;
		int maxStep = Max(Floor(Abs(ah->__SubpixelX)), Floor(Abs(ah->__SubpixelY)));
		for(int i=0; i<maxStep; ++i){
			if(ah->__SubpixelX<=-1){
				if(CanMove(n, DIR_LEFT, moveStyle)){
					--n->X;
					++ah->__SubpixelX;
				}
				else{
					ah->__SubpixelX = 0;
				}
			}
			else if(ah->__SubpixelX>=1){
				if(CanMove(n, DIR_RIGHT, moveStyle)){
					++n->X;
					--ah->__SubpixelX;
				}
				else{
					ah->__SubpixelX = 0;
				}
			}
			if(ah->__SubpixelY<=-1){
				if(CanMove(n, DIR_UP, moveStyle)){
					--n->Y;
					++ah->__SubpixelY;
				}
				else{
					ah->__SubpixelY = 0;
				}
			}
			else if(ah->__SubpixelY>=1){
				if(CanMove(n, DIR_DOWN, moveStyle)){
					++n->Y;
					--ah->__SubpixelY;
				}
				else{
					ah->__SubpixelY = 0;
				}
			}
		}
	}
	// Moves the enemy at an angle
	void MoveAtAngle(npc n, int angle, int step, int moveStyle){
		MoveXY(n, VectorX(step, angle), VectorY(step, angle), moveStyle);
	}
	// Moves the enemy toward Link
	void MoveTowardLink(npc n, int step, int moveStyle){
		int angle = Angle(CenterX(n)-8, CenterY(n)-8, Link->X, Link->Y);
		MoveXY(n, VectorX(step, angle), VectorY(step, angle), moveStyle);
	}
	// Moves the enemy toward a point, returns true if it still has more to move
	bool MoveTowardPoint(npc n, int tx, int ty, int step, int moveStyle){
		int angle = Angle(n->X, n->Y, tx, ty);
		if(Distance(n->X, n->Y, tx, ty)<step){
			n->X = tx;
			n->Y = ty;
			return false;
		}
		else
			MoveXY(n, VectorX(step, angle), VectorY(step, angle), moveStyle);
		return true;
	}
	
	// Tries to get the hitbox unstuck when in a solid
	void TryUnstickHitbox(npc n, int moveStyle){
		//First check if it's actually stuck
		if(!CanPlace(n, n->X, n->Y, moveStyle)){
			AnimHandler ah = n->Misc[NPCM_ANIMPOINTER];
			
			//Get a max step value based on 1/2 the widest hitbox side in multiples of 8
			int side = Max(ah->CollWidth, ah->CollHeight);
			int maxStep = Max(8, Floor(side/16)*8); 
			
			int cx = Floor(n->X+ah->CollXOff+ah->CollWidth/2)%16;
			int cy = Floor(n->Y+ah->CollYOff+ah->CollHeight/2)%16;
			
			int topdist = Abs(cy-0);
			int bottomdist = Abs(cy-15);
			int leftdist = Abs(cx-0);
			int rightdist = Abs(cx-15);
			
			//Start closer to the center and extend outward
			for(int i=0; i<=maxStep; i+=8){
				//Check adjacent positions in all 8 directions
				for(int dir=DIR_UP; dir<=DIR_RIGHTDOWN; ++dir){
					int vX;
					int vY;
					switch(dir){
						case DIR_UP:
							vY = -i-topdist;
							break;
						case DIR_DOWN:
							vY = i+bottomdist+1;
							break;
						case DIR_LEFT:
							vX = -i-leftdist;
							break;
						case DIR_RIGHT:
							vX = i+rightdist+1;
							break;
						case DIR_LEFTUP:
							vX = -i-leftdist;
							vY = -i-topdist;
							break;
						case DIR_RIGHTUP:
							vX = i+rightdist+1;
							vY = -i-topdist;
							break;
						case DIR_LEFTDOWN:
							vX = -i-leftdist;
							vY = i+bottomdist+1;
							break;
						case DIR_RIGHTDOWN:
							vX = i+rightdist+1;
							vY = i+bottomdist+1;
							break;
					}
					if(CanPlace(n, n->X+vX, n->Y+vY, moveStyle)){
						n->X += vX;
						n->Y += vY;
						return;
					}
				}
			}
		}
	}

	// Returns true if the enemy's current animation has finished
	bool AnimFinished(npc n){
		AnimHandler ah = n->Misc[NPCM_ANIMPOINTER];
		
		return ah->AnimFinished;
	}
	
	// Returns the enemy's current animation
	int GetCurAnim(npc n){
		AnimHandler ah = n->Misc[NPCM_ANIMPOINTER];
		
		return ah->CurAnim;
	}
	
	// Returns the enemy's current animation frame
	int GetCurAnimFrame(npc n){
		AnimHandler ah = n->Misc[NPCM_ANIMPOINTER];
		
		return ah->CurFrame;
	}
	
	// Sets the animation speed multiplier
	int SetAnimSpeedMultiplier(npc n, int speed){
		AnimHandler ah = n->Misc[NPCM_ANIMPOINTER];
		
		ah->AnimSpeedMultiplier = speed;
	}

	//		Legacy Functions
	//
	// These are here because older versions of the header used them and it makes 
	// converting scripts easier. 
	
	namespace Legacy{
		// old name
		int SetAnimSpeed(npc n, int speed){
			SetAnimSpeedMultiplier(n, speed);
		}
		
		void UpdateAnims(npc n){
			AnimHandler ah = n->Misc[NPCM_ANIMPOINTER];
			
			ah->Update();
		}
		
		void SetAnimSpriteHitbox(npc n, int w, int h, int top, int bottom, int left, int right, bool center=false){
			AnimHandler ah = n->Misc[NPCM_ANIMPOINTER];
			
			ah->SetHitbox(w, h, {top, bottom, left, right}, center);
		}
		
		void SetAnimMovementHitbox(npc n, int top, int bottom, int left, int right, bool center=false){
			AnimHandler ah = n->Misc[NPCM_ANIMPOINTER];
			
			ah->SetMovementHitbox({top, bottom, left, right}, center);
		}
		
		void CenterHitbox(npc n){
			AnimHandler ah = n->Misc[NPCM_ANIMPOINTER];
			
			ah->CenterHitbox();
		}
		
		int AddAnim(AnimHandler ah, int animID, int tile, int numFrames, int aSpeed, int loopFrame, int nextAnim, int flags){
			return ah->AddAnim(animID, tile, numFrames, aSpeed, loopFrame, nextAnim, flags);
		}
		int AddAnim(AnimHandler ah, int animID, int tile, int numFrames, int aSpeed, int loopFrame, int flags){
			return ah->AddAnim(animID, tile, numFrames, aSpeed, loopFrame, -1, flags);
		}
		int AddAnim(AnimHandler ah, int animID, int tile, int numFrames, int aSpeed, int flags){
			return ah->AddAnim(animID, tile, numFrames, aSpeed, 0, -1, flags);
		}
		
		void ExtendAnim(AnimHandler ah, int animID, int tileW, int tileH, int hitOffsets, int collOffsets, int drawOffsets, int posOffsets){
			ah->ExtendAnim(animID, tileW, tileH, hitOffsets, collOffsets, drawOffsets, posOffsets);
		}
		
		void SetFakeShadow(npc n, int spr, int w=1, int h=1, int offset=0){
			AnimHandler ah = n->Misc[NPCM_ANIMPOINTER];
			
			ah->SetFakeShadow(spr, w, h, offset);
		}
		
		void PlayAnim(npc n, int animID, bool noReset=false){
			AnimHandler ah = n->Misc[NPCM_ANIMPOINTER];
			
			ah->PlayAnim(animID, noReset);
		}
		
		void PlayDeathAnim(npc n, int spr, int w, int h, int sfx, bool noFreeze){
			AnimHandler ah = n->Misc[NPCM_ANIMPOINTER];
			
			ah->PlayDeathAnim(spr, w, h, sfx, noFreeze);
		}
		void PlayDeathAnim(npc n, bool noFreeze=false){
			AnimHandler ah = n->Misc[NPCM_ANIMPOINTER];
			
			ah->PlayDeathAnim(noFreeze);
		}
	}
}