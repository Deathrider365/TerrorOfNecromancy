//NPCAnim.zh ver 1.1.0

CONFIG NPCM_ANIMPOINTER = 15; //Index for storing the animation pointer in NPC->Misc[]
CONFIG ANIM_BUFFER_LENGTH = 1024; //Arbitrary size for NPC animation array

CONFIGB NEW_NPC_DEATHANIM = false; //If true, the death animation flickers the enemy before it disappears. This is mostly toggleable because ghost doesn't do this.

namespace NPCAnim{
	//User defined function for custom pixel collisions, accessed when moveStyle is negative
	bool CanMovePixelCustom(int x, int y, int moveStyle){
		//Define your own behavior here
	}
	
	//Constants for indices at the start of the animation array
	enum AnimIndex{ 
		AI_CURANIM,
		AI_NUMANIMS,
		AI_CURFRAME,
		AI_CLOCK,
		AI_DIR,
		AI_ORIGINALTILE,
		AI_ANIMFINISHED,
		AI_SPEEDMOD,
		AI_SUBPIXELX,
		AI_SUBPIXELY,
		AI_SHADOW_TILE,
		AI_SHADOW_CSET,
		AI_SHADOW_W,
		AI_SHADOW_H,
		AI_SHADOW_NUMFRAMES,
		AI_SHADOW_ASPEED,
		AI_SHADOW_YOFF,
		AI_SHADOW_CLOCK,
		AI_COLL_XOFF,
		AI_COLL_YOFF,
		AI_COLL_WIDTH,
		AI_COLL_HEIGHT,
		AI_END
	};
	
	//Constants for indices within individual animations
	enum AnimDefIndex{
		ADI_VALID,
		ADI_TILE,
		ADI_NUMFRAMES,
		ADI_ASPEED,
		ADI_NEXT,
		ADI_LOOPFRAME,
		ADI_FLAGS,
		ADI_END
	};
	
	//Constants for move styles
	enum AnimMoveStyle{
		AM_NONE,
		AM_FLIER,
		AM_WATERONLY,
		AM_DEEPWATERONLY,
		AM_PITONLY,
		AM_IGNOREALL,
		AM_IGNOREALLOFFSCREEN
	};
	
	const int ADF_4WAY = 0x01; //Animation is 4-directional
	const int ADF_8WAY = 0x02; //Animation is 8-directional
	const int ADF_FLIPRIGHT = 0x04; //Left facing animations are flipped when facing right
	const int ADF_NOLOOP = 0x08; //The animation doesn't loop when it ends
	const int ADF_NORELATIVE = 0x10; //Animation frames are absolute tile values rather than relative to the enemy's original tile
	const int ADF_NORESET = 0x20; //Animation frame doesn't reset on changing animations
	const int ADF_REVERSE = 0x40; //Animation plays in reverse
	
	//Call at the start of the script after initializing the animation buffer
	void InitAnims(npc n, int aptr){
		n->Misc[NPCM_ANIMPOINTER] = aptr;
		
		int arraySize = SizeOfArray(aptr);
		if(arraySize!=ANIM_BUFFER_LENGTH){
			ResizeArray(aptr, ANIM_BUFFER_LENGTH);
			printf("NPCANIM.ZH WARNING: Animation buffer array isn't the expected length. Attempting to resize it to the correct length. Please use the ANIM_BUFFER_LENGTH constant.\n");
		}
		
		aptr[AI_ORIGINALTILE] = n->OriginalTile;
		aptr[AI_SPEEDMOD] = 1;
	}
	
	//Sets an enemy's tile width and height and shaves pixels off the edges of its hitbox
	void SetAnimSpriteHitbox(npc n, int w, int h, int top, int bottom, int left, int right){
		n->Extend = 3;
		n->HitXOffset = 0;
		n->HitYOffset = 0;
		n->TileWidth = w;
		n->TileHeight = h;
		n->HitWidth = w*16;
		n->HitHeight = h*16;
		n->HitXOffset += left;
		n->HitWidth -= left;
		n->HitWidth -= right;
		n->HitYOffset += top;
		n->HitHeight -= top;
		n->HitHeight -= bottom;
	}
	//Sets the enemy's movement hitbox, based on its tile width and height
	void SetAnimMovementHitbox(npc n, int top, int bottom, int left, int right){
		int aptr = n->Misc[NPCM_ANIMPOINTER];
		
		aptr[AI_COLL_XOFF] = 0;
		aptr[AI_COLL_YOFF] = 0;
		aptr[AI_COLL_WIDTH] = n->TileWidth*16;
		aptr[AI_COLL_HEIGHT] = n->TileHeight*16;
		aptr[AI_COLL_XOFF] += left;
		aptr[AI_COLL_WIDTH] -= left;
		aptr[AI_COLL_WIDTH] -= right;
		aptr[AI_COLL_YOFF] += top;
		aptr[AI_COLL_HEIGHT] -= top;
		aptr[AI_COLL_HEIGHT] -= bottom;
	}
	
	//Update an NPC's animation for the frame
	void UpdateAnims(npc n){
		int aptr = n->Misc[NPCM_ANIMPOINTER];
		
		int curAnim = aptr[AI_CURANIM];
		int curFrame = aptr[AI_CURFRAME];
		
		//Skip updates if the enemy is invisible
		if(curAnim==-1)
			return;
	
		int aTile = GetAnimProperty(aptr, curAnim, ADI_TILE);
		int maxFrame = GetAnimProperty(aptr, curAnim, ADI_NUMFRAMES);
		int maxClock = GetAnimProperty(aptr, curAnim, ADI_ASPEED);
		int nextAnim = GetAnimProperty(aptr, curAnim, ADI_NEXT);
		int loopFrame = GetAnimProperty(aptr, curAnim, ADI_LOOPFRAME);
		int flags = GetAnimProperty(aptr, curAnim, ADI_FLAGS);
		if(aptr[AI_SPEEDMOD]){
			maxClock = Ceiling(maxClock/aptr[AI_SPEEDMOD]);
		}
		
		//If using a 4 or 8 directional animation, only update direction when it's valid
		if(flags&ADF_8WAY){
			if(n->Dir>=0&&n->Dir<8)
				aptr[AI_DIR] = n->Dir;
			
			//Update the frame based on direction
			curFrame += aptr[AI_DIR]*maxFrame;
			//Rearrange the animation order to remove right facing frames when the flip flag is on
			//This is kinda messy... :/
			if(flags&ADF_FLIPRIGHT){
				switch(aptr[AI_DIR]){
					case DIR_RIGHT: 
					case DIR_LEFTUP:
						curFrame -= maxFrame; 
						break;
					case DIR_LEFTDOWN:
					case DIR_RIGHTUP:
						curFrame -= maxFrame*2;
						break;
					case DIR_RIGHTDOWN:
						curFrame -= maxFrame*3;
						break;
				}
			}
		}
		else if(flags&ADF_4WAY){
			if(n->Dir>=0&&n->Dir<4)
				aptr[AI_DIR] = n->Dir;
			//Update the frame based on direction
			curFrame += aptr[AI_DIR]*maxFrame;
			if(flags&ADF_FLIPRIGHT){
				if(aptr[AI_DIR]==DIR_RIGHT)
					curFrame -= maxFrame;
			}
		}
		else{
			aptr[AI_DIR] = n->Dir;
		}
		int dir = aptr[AI_DIR];
		
		//Relative animations will use an offset from the enemy's original tile instead of absolute tile numbers
		if(!(flags&ADF_NORELATIVE))
			aTile += aptr[AI_ORIGINALTILE];
		
		//Apply a tile flip when facing right if the flag is set
		if(flags&ADF_FLIPRIGHT){
			n->ScriptFlip = 0;
			if(flags&ADF_8WAY){
				if(dir==DIR_RIGHT||dir==DIR_RIGHTUP||dir==DIR_RIGHTDOWN)
					n->ScriptFlip = 1;
			}
			else if(flags&ADF_4WAY){
				if(dir==DIR_RIGHT)
					n->ScriptFlip = 1;
			}
			else
				n->ScriptFlip  = 1;
		}
		
		//Set the enemy's tile based on the current frame of its animation
		int til = aTile + curFrame*n->TileWidth + Floor((curFrame*n->TileWidth)/20)*20*(n->TileHeight-1);
		n->OriginalTile = til;
		n->Tile = til;
		
		//Update the tile animation
		if(aptr[AI_SPEEDMOD]>0) //If animation isn't suspended
			++aptr[AI_CLOCK];
		if(aptr[AI_CLOCK]>=maxClock){
			if(flags&ADF_REVERSE)
				--aptr[AI_CURFRAME];
			else
				++aptr[AI_CURFRAME];
			bool loop;
			if(flags&ADF_REVERSE){
				if(aptr[AI_CURFRAME]<0)
					loop = true;
			}
			else{
				if(aptr[AI_CURFRAME]>=maxFrame)
					loop = true;
			}
			if(loop){
				aptr[AI_ANIMFINISHED] = 1;
				//If not a looping animation, repeat the last frame on loop
				if(flags&ADF_NOLOOP){
					if(flags&ADF_REVERSE)
						aptr[AI_CURFRAME] = 0;
					else
						aptr[AI_CURFRAME] = maxFrame-1;
				}
				//If it links into a new animation, play that
				else if(nextAnim>-1){
					aptr[AI_CURFRAME] = (flags&ADF_REVERSE)?maxFrame-1:0;
					aptr[AI_CURANIM] = nextAnim;
					aptr[AI_ANIMFINISHED] = 0;
				}
				else
					aptr[AI_CURFRAME] = (flags&ADF_REVERSE)?maxFrame-1-loopFrame:loopFrame;
			}
			aptr[AI_CLOCK] = 0;
		}
		
		//Update shadows
		if(aptr[AI_SHADOW_TILE]){
			if(n->Z>0||n->FakeZ>0){
				int layer = 2;
				if(ScreenFlag(1, 4)) //Layer -2
					layer = 1;
				
				int w = aptr[AI_SHADOW_W];
				int h = aptr[AI_SHADOW_H];
				int x = CenterX(n)-w*8;
				int y = n->Y+n->TileWidth*16-h*16+aptr[AI_SHADOW_YOFF];
				int frame = Floor(aptr[AI_SHADOW_CLOCK]/aptr[AI_SHADOW_ASPEED]);
				int til = aptr[AI_SHADOW_TILE] + frame*w + Floor((frame*w)/20)*20*(h-1);
				Screen->DrawTile(layer, x, y, til, w, h, aptr[AI_SHADOW_CSET], -1, -1, 0, 0, 0, 0, true, Game->FFRules[qr_TRANSSHADOWS]?OP_TRANS:OP_OPAQUE);
				
				++aptr[AI_SHADOW_CLOCK];
				if(aptr[AI_SHADOW_CLOCK]>=aptr[AI_SHADOW_NUMFRAMES]*aptr[AI_SHADOW_ASPEED])
					aptr[AI_SHADOW_CLOCK] = 0;
			}
		}
	}

	//Adds a new animation to the aptr array
	//int aptr - The array pointer
	//int animID - The ID to assign the animation to, if -1 will fetch a new ID and return the value
	//int tile - The tile for the animation, relative to the enemy's original tile by default
	//int numFrames - How many frames of animation to use
	//int aSpeed - How many clock ticks (60ths of a second) each animation frame takes
	//int loopFrame - Which frame to loop to when the animation ends
	//int nextAnim - Which animation to switch to when the animation ends (-1 for none)
	//int flags - The sum of all ADF_ flags to use
	int AddAnim(int aptr, int animID, int tile, int numFrames, int aSpeed, int loopFrame, int nextAnim, int flags){
		int tmp_animID = animID;
		if(animID==-1)
			tmp_animID = aptr[AI_NUMANIMS];
		
		int arraySize = SizeOfArray(aptr);
		if(AI_END+(tmp_animID+1)*ADI_END>arraySize){
			printf("NPCANIM.ZH ERROR: Not enough room in animation buffer for animation.\nAnimation ID: %d\nBuffer size: %d\n", tmp_animID, arraySize);
		}
		
		SetAnimProperty(aptr, tmp_animID, ADI_VALID, 1);
		SetAnimProperty(aptr, tmp_animID, ADI_TILE, tile);
		SetAnimProperty(aptr, tmp_animID, ADI_NUMFRAMES, numFrames);
		SetAnimProperty(aptr, tmp_animID, ADI_ASPEED, aSpeed);
		SetAnimProperty(aptr, tmp_animID, ADI_LOOPFRAME, loopFrame);
		SetAnimProperty(aptr, tmp_animID, ADI_NEXT, nextAnim);
		SetAnimProperty(aptr, tmp_animID, ADI_FLAGS, flags);
		
		if(animID==-1)
			++aptr[AI_NUMANIMS];
		else
			aptr[AI_NUMANIMS] = Max(aptr[AI_NUMANIMS], animID+1);
		return tmp_animID;
	}
	int AddAnim(int aptr, int animID, int tile, int numFrames, int aSpeed, int loopFrame, int flags){
		AddAnim(aptr, animID, tile, numFrames, aSpeed, loopFrame, -1, flags);
	}
	int AddAnim(int aptr, int animID, int tile, int numFrames, int aSpeed, int flags){
		if(flags&ADF_REVERSE)
			AddAnim(aptr, animID, tile, numFrames, aSpeed, numFrames-1, -1, flags);
		else
			AddAnim(aptr, animID, tile, numFrames, aSpeed, 0, -1, flags);
	}
	
	//Sets the enemy to draw a fake shadow
	//int spr - The sprite in Sprite Data to use for the shadow, 0 to remove it
	//int w,h - The width and height in tiles
	//offset - An extra Y offset for adjusting the shadow's position
	void SetFakeShadow(npc n, int spr, int w, int h, int offset){
		int aptr = n->Misc[NPCM_ANIMPOINTER];
		if(spr<=0){
			aptr[AI_SHADOW_TILE] = 0;
			return;
		}
		
		//Let's make sure a second shadow doesn't get drawn over the fake one
		if(n->Extend==3)
			n->Extend = 4;
		
		w = Max(w, 1);
		h = Max(h, 1);
		
		spritedata sd = Game->LoadSpriteData(spr);
		
		aptr[AI_SHADOW_TILE] = sd->Tile;
		aptr[AI_SHADOW_CSET] = sd->CSet;
		aptr[AI_SHADOW_W] = w;
		aptr[AI_SHADOW_H] = h;
		aptr[AI_SHADOW_NUMFRAMES] = sd->Frames;
		aptr[AI_SHADOW_ASPEED] = sd->Speed;
		aptr[AI_SHADOW_YOFF] = offset;
		aptr[AI_SHADOW_CLOCK] = 0;
	}
	void SetFakeShadow(npc n, int spr, int w, int h){
		SetFakeShadow(n, spr, w, h, 0);
	}
	void SetFakeShadow(npc n, int spr){
		SetFakeShadow(n, spr, 1, 1, 0);
	}
	
	//Play a new animation
	//int animID - Which animation to play. -1 will make the enemy invisible
	//bool noReset - If true, the current frame of animation won't reset even if the ADF_NORESET flag isn't set on the previous animation
	void PlayAnim(npc n, int animID, bool noReset){
		int aptr = n->Misc[NPCM_ANIMPOINTER];
		
		//If set to ID -1, make invisible and quit
		if(animID==-1){
			n->DrawXOffset = -1000;
			n->CollDetection = false;
			aptr[AI_CURANIM] = -1;
			return;
		}
		
		int arraySize = SizeOfArray(aptr);
		if(animID>=aptr[AI_NUMANIMS]||AI_END+(animID+1)*ADI_END>arraySize){
			printf("NPCANIM.ZH ERROR: Attempted to play an animation outside of the animation buffer. (%d)\n", animID);
			return;
		}
		if(!GetAnimProperty(aptr, animID, ADI_VALID)){
			printf("NPCANIM.ZH ERROR: Attempted to play an undefined animation. (%d)\n", animID);
			return;
		}
		
		int aTile = GetAnimProperty(aptr, animID, ADI_TILE);
		int maxFrame = GetAnimProperty(aptr, animID, ADI_NUMFRAMES);
		int maxClock = GetAnimProperty(aptr, animID, ADI_ASPEED);
		int nextAnim = GetAnimProperty(aptr, animID, ADI_NEXT);
		int loopFrame = GetAnimProperty(aptr, animID, ADI_LOOPFRAME);
		int flags = GetAnimProperty(aptr, animID, ADI_FLAGS);
		
		int old_flags;
		//If it was invisible, turn visibility and collision back on
		if(aptr[AI_CURANIM]==-1){
			n->DrawXOffset = 0;
			n->CollDetection = true;
		}
		else
			old_flags = GetAnimProperty(aptr, aptr[AI_CURANIM], ADI_FLAGS);
			
		aptr[AI_CURANIM] = animID;
		if(old_flags&ADF_NORESET||noReset){
			//If the animation doesn't reset, keep the values clamped to the new animation length
			if(flags&ADF_REVERSE){
				int maxFrame2 = maxFrame-loopFrame;
				aptr[AI_CURFRAME] = Clamp(loopFrame-aptr[AI_CURFRAME], maxFrame2, maxFrame-1);
			}
			else{
				int maxFrame2 = maxFrame-loopFrame;
				aptr[AI_CURFRAME] = Clamp(loopFrame+aptr[AI_CURFRAME], 0, maxFrame2);
			}
			aptr[AI_CLOCK] = Clamp(aptr[AI_CLOCK], 0, maxClock);
		}
		else{
			aptr[AI_CURFRAME] = (flags&ADF_REVERSE)?maxFrame-1:0;
			aptr[AI_CLOCK] = 0;
		}
		aptr[AI_ANIMFINISHED] = 0;
	}
	void PlayAnim(npc n, int animID){
		PlayAnim(n, animID, false);
	}
	//Plays an exploding death animation
	void PlayDeathAnim(npc n, int spr, int w, int h, int sfx, bool noFreeze){
		n->Immortal = true;
		n->CollDetection = false;
		npcdata nd = Game->LoadNPCData(n->ID);
		Game->PlaySound(nd->DeathSFX);
		if(noFreeze)
			SetAnimSpeed(n, 0);
		int redrawXOffset = n->DrawXOffset;
		int redrawYOffset = n->DrawYOffset;
		n->DrawXOffset = -1000;
		n->DrawYOffset = -1000;
		int redrawLayer = 2;
		if(ScreenFlag(1, 4)) //Layer -2
			redrawLayer = 1;
		
		for(int i=0; i<15; ++i){
			int x = n->X+Rand(-8, 16*n->TileWidth-8)+redrawXOffset;
			int y = n->Y+Rand(-8, 16*n->TileHeight-8)+redrawYOffset-n->Z-n->FakeZ;
			if(spr){
				w = Max(w, 1);
				h = Max(h, 1);
				if(sfx)
					Game->PlaySound(sfx);
				lweapon l = CreateLWeaponAt(LW_SPARKLE, x, y);
				l->UseSprite(spr);
				l->Extend = 3;
				l->TileWidth = w;
				l->TileHeight = h;
				l->DrawXOffset -= (w-1)*8;
				l->DrawYOffset -= (h-1)*8;
				l->DrawStyle = DS_LINK;
			}
			else{
				lweapon l = CreateLWeaponAt(LW_BOMBBLAST, x, y);
				l->CollDetection = false;
				l->DrawStyle = DS_LINK;
			}
			for(int j=0; j<16; ++j){
				int tile = (n->ScriptTile>-1)?n->ScriptTile:n->Tile;
				int flip = (n->ScriptFlip>-1)?n->ScriptFlip:0;
				if(j%4<2||i<12||!NEW_NPC_DEATHANIM)
					Screen->DrawTile(redrawLayer, n->X+redrawXOffset, n->Y+redrawYOffset-n->Z-n->FakeZ, tile, n->TileWidth, n->TileHeight, n->CSet, -1, -1, 0, 0, 0, flip, true, OP_OPAQUE);
				Waitframe(n);
			}
		}
		n->Immortal = false;
		n->HP = HP_SILENT;
		n->X+=(n->TileWidth-1)*8;
        n->Y+=(n->TileHeight-1)*8;
		Quit();
	}
	void PlayDeathAnim(npc n, bool noFreeze){
		PlayDeathAnim(n, 0, 0, 0, 0, noFreeze);
	}
	void PlayDeathAnim(npc n){
		PlayDeathAnim(n, 0, 0, 0, 0, false);
	}
	//Turns the enemy to face Link
	void FaceLink(npc n, bool eightDirectional){
		if(eightDirectional)
			n->Dir = AngleDir8(Angle(CenterX(n)-8, CenterY(n)-8, Link->X, Link->Y));
		else
			n->Dir = AngleDir4(Angle(CenterX(n)-8, CenterY(n)-8, Link->X, Link->Y));
	}
	void FaceLink(npc n){
		FaceLink(n, false);
	}
	//Returns true if the enemy's current animation has finished
	bool AnimFinished(npc n){
		int aptr = n->Misc[NPCM_ANIMPOINTER];
		return aptr[AI_ANIMFINISHED];
	}
	//Returns the enemy's current animation
	int GetCurAnim(npc n){
		int aptr = n->Misc[NPCM_ANIMPOINTER];
		return aptr[AI_CURANIM];
	}
	//Returns the enemy's current animation frame
	int GetCurAnimFrame(npc n){
		int aptr = n->Misc[NPCM_ANIMPOINTER];
		return aptr[AI_CURFRAME];
	}
	//Sets the animation speed modifier
	int SetAnimSpeed(npc n, int speed){
		int aptr = n->Misc[NPCM_ANIMPOINTER];
		aptr[AI_SPEEDMOD] = speed;
	}
	
	//Simple waitframe function that also calls the animation update
	void Waitframe(npc n){
		UpdateAnims(n);
		Waitframe();
	}
	void Waitframe(npc n, int frames){
		for(int i=0; i<frames; ++i)
			Waitframe(n);
	}
	//Wait for the current animation to finish
	void Waitanim(npc n){
		while(!AnimFinished(n))
			Waitframe(n);
	}
	void Waitanim(npc n, int animID){
		while(GetCurAnim(n)==animID)
			Waitframe(n);
	}

	const int ANIM_WALKABILITY_MAXLAYER = 2; //Max layer to check for combo types
	
	//Returns true if an enemy can walk onto a pixel
	bool CanMovePixel(int x, int y, int moveStyle){
		if(moveStyle<0)
			return CanMovePixelCustom(x, y, moveStyle);
		
		int pos = ComboAt(x, y);
		
		bool solid = Screen->isSolid(x, y);
		bool offscreen = x<0||x>255||y<0||y>175;
		bool water;
		bool shallowwater;
		bool pitfall;
		bool warp;
		bool noenemy;
		bool nofly;
		bool noground;
		//Cycle over layers 0, 1, and 2 for combo types and flags that can affect movement
		for(int i=0; i<=ANIM_WALKABILITY_MAXLAYER; ++i){
			mapdata lyr = Game->LoadTempScreen(i);
			switch(lyr->ComboT[pos]){
				case CT_WATER:
				case CT_SWIMWARP:
				case CT_DIVEWARP:
				case CT_SWIMWARPB...CT_DIVEWARPD:
					water = true;
					break;
				case CT_SHALLOWWATER:
					shallowwater = true;
					break;
				case CT_PITFALL:
					pitfall = true;
					break;
				case CT_NOENEMY:
					noenemy = true;
					break;
				case CT_NOFLYZONE:
					nofly = true;
					break;
				case CT_STAIR:
				case CT_STAIRB...CT_STAIRD:
				case CT_STAIRR:
				case CT_PIT:
				case CT_PITB...CT_PITD:
				case CT_SWARPA...CT_SWARPR:
					warp = true;
					break;
			}
			for(int j=0; j<2; ++j){
				int flag = lyr->ComboF[pos];
				if(j==1)
					flag = lyr->ComboI[pos];
				switch(flag){
					case CF_NOENEMY:
						noenemy = true;
						break;
					case CF_NOGROUNDENEMY:
						noground = true;
						break;
				}
			}
		}
		
		switch(moveStyle){
			case AM_NONE:
				return !(solid||offscreen||water||pitfall||warp||noenemy||noground);
			case AM_FLIER:
				return !(offscreen||noenemy||nofly);
			case AM_WATERONLY:
				return !(solid||offscreen||noenemy||noground)&&(water||shallowwater);
			case AM_DEEPWATERONLY:
				return !(solid||offscreen||noenemy||noground)&&water;
			case AM_PITONLY:
				return !(solid||offscreen||noenemy||noground)&&pitfall;
			case AM_IGNOREALL:
				return !offscreen;
			case AM_IGNOREALLOFFSCREEN:
				return true;
		}
	}
	//Returns true if an enemy can move one pixel in the given direction
	bool CanMove(npc n, int dir, int moveStyle){
		int aptr = n->Misc[NPCM_ANIMPOINTER];
		int xOff = n->HitXOffset;
		int yOff = n->HitYOffset;
		int collWidth = n->HitWidth;
		int collHeight = n->HitHeight;
		if(aptr[AI_COLL_WIDTH]>0&&aptr[AI_COLL_HEIGHT]>0){
			xOff = aptr[AI_COLL_XOFF];
			yOff = aptr[AI_COLL_YOFF];
			collWidth = aptr[AI_COLL_WIDTH];
			collHeight = aptr[AI_COLL_HEIGHT];
		}
		int x = n->X+xOff;
		int y = n->Y+yOff;
		int w = collWidth-1;
		int h = collHeight-1;
		switch(dir){
			case DIR_UP:
				for(int i=0; i<=w; i=Min(i+8, w)){
					if(!CanMovePixel(x+i, y-1, moveStyle))
						return false;
					if(i==w)
						break;
				}
				break;
			case DIR_DOWN:
				for(int i=0; i<=w; i=Min(i+8, w)){
					if(!CanMovePixel(x+i, y+h+1, moveStyle))
						return false;
					if(i==w)
						break;
				}
				break;
			case DIR_LEFT:
				for(int i=0; i<=h; i=Min(i+8, h)){
					if(!CanMovePixel(x-1, y+i, moveStyle))
						return false;
					if(i==h)
						break;
				}
				break;
			case DIR_RIGHT:
				for(int i=0; i<=h; i=Min(i+8, h)){
					if(!CanMovePixel(x+w+1, y+i, moveStyle))
						return false;
					if(i==h)
						break;
				}
				break;
		}
		return true;
	}
	//Returns true if an enemy can be placed at the target position
	bool CanPlace(npc n, int x, int y, int moveStyle){
		int aptr = n->Misc[NPCM_ANIMPOINTER];
		int xOff = n->HitXOffset;
		int yOff = n->HitYOffset;
		int collWidth = n->HitWidth;
		int collHeight = n->HitHeight;
		if(aptr[AI_COLL_WIDTH]>0&&aptr[AI_COLL_HEIGHT]>0){
			xOff = aptr[AI_COLL_XOFF];
			yOff = aptr[AI_COLL_YOFF];
			collWidth = aptr[AI_COLL_WIDTH];
			collHeight = aptr[AI_COLL_HEIGHT];
		}
		int xx = x+xOff;
		int yy = y+yOff;
		int w = collWidth-1;
		int h = collHeight-1;
		for(int xi=0; xi<w; xi=Min(xi+8, w)){
			for(int yi=0; yi<h; yi=Min(yi+8, h)){
				if(!CanMovePixel(xx+xi, yy+yi, moveStyle))
					return false;
				if(yi==h)
					break;
			}
			if(xi==w)
				break;
		}
		return true;
	}
	//Moves the enemy on the X and Y axis
	void MoveXY(npc n, int vx, int vy, int moveStyle){
		int aptr = n->Misc[NPCM_ANIMPOINTER];
		aptr[AI_SUBPIXELX] += vx;
		aptr[AI_SUBPIXELY] += vy;
		int maxStep = Max(Floor(Abs(aptr[AI_SUBPIXELX])), Floor(Abs(aptr[AI_SUBPIXELY])));
		for(int i=0; i<maxStep; ++i){
			if(aptr[AI_SUBPIXELX]<=-1){
				if(CanMove(n, DIR_LEFT, moveStyle)){
					--n->X;
					++aptr[AI_SUBPIXELX];
				}
				else{
					aptr[AI_SUBPIXELX] = 0;
				}
			}
			else if(aptr[AI_SUBPIXELX]>=1){
				if(CanMove(n, DIR_RIGHT, moveStyle)){
					++n->X;
					--aptr[AI_SUBPIXELX];
				}
				else{
					aptr[AI_SUBPIXELX] = 0;
				}
			}
			if(aptr[AI_SUBPIXELY]<=-1){
				if(CanMove(n, DIR_UP, moveStyle)){
					--n->Y;
					++aptr[AI_SUBPIXELY];
				}
				else{
					aptr[AI_SUBPIXELY] = 0;
				}
			}
			else if(aptr[AI_SUBPIXELY]>=1){
				if(CanMove(n, DIR_DOWN, moveStyle)){
					++n->Y;
					--aptr[AI_SUBPIXELY];
				}
				else{
					aptr[AI_SUBPIXELY] = 0;
				}
			}
		}
	}
	//Moves the enemy at an angle
	void MoveAtAngle(npc n, int angle, int step, int moveStyle){
		MoveXY(n, VectorX(step, angle), VectorY(step, angle), moveStyle);
	}
	//Moves the enemy toward Link
	void MoveTowardLink(npc n, int step, int moveStyle){
		int angle = Angle(CenterX(n)-8, CenterY(n)-8, Link->X, Link->Y);
		MoveXY(n, VectorX(step, angle), VectorY(step, angle), moveStyle);
	}
	//Moves the enemy toward a point
	void MoveTowardPoint(npc n, int tx, int ty, int step, int moveStyle){
		int angle = Angle(n->X, n->Y, tx, ty);
		MoveXY(n, VectorX(step, angle), VectorY(step, angle), moveStyle);
	}
	
	//Get/setting animation properties in the array
	int GetAnimProperty(int aptr, int animID, int prop){
		return aptr[AI_END+ADI_END*animID+prop];
	}
	int SetAnimProperty(int aptr, int animID, int prop, int value){
		aptr[AI_END+ADI_END*animID+prop] = value;
	}
}